Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100





# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        
        if root==None:
            return True
        def IsTrue(left,right):
            if left==None and right==None:
                return True

            if (left!=None and right==None) or (left==None and right!=None):
                return False

            if left.val!=right.val:    
                return False

            return IsTrue(left.left,right.right) and IsTrue(left.right,right.left)
        return IsTrue(root.left, root.right)
