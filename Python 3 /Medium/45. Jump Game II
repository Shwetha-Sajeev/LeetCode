You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [2,3,0,1,4]
Output: 2
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 1000
It's guaranteed that you can reach nums[n - 1].




class Solution:
    def jump(self, nums: List[int]) -> int:

        ans=0

        if len(nums)<2: #Edge case where the array is of length 1 or 0
            return ans

        end=0 
        maxend=0
        i=0

        while True: #Constraint is that every test case is valid for the jump game so this loop has to eventually end by return
            while i<=end:
                if nums[i]+i > maxend:
                    maxend=nums[i]+i
                if maxend >= len(nums)-1:
                    return ans+1
                i+=1
                # if i>=len(nums):
                #     break
            if end < maxend:
                end=maxend
                ans+=1
            # else:
            #     break
        return ans
